#!groovy

node('maven-appdev') {
  def mvnCmd = "mvn -s ./nexus_settings_openshift.xml"

  // Checkout Source Code
	stage('Checkout Source') {
	  checkout scm
	}

  // Extract version and other properties from the pom.xml
	pom = readMavenPom file: 'pom.xml'
	def groupId    = pom.groupId
	def artifactId = pom.artifactId
	def version    = pom.version

	// Set the tag for the development image: version + build number
	def devTag  = "${version}-${BUILD_NUMBER}"
	// Set the tag for the production image: version
	def prodTag = "${version}"

  // Using Maven build the war file
  // Do not run tests in this step
	stage('Build jar') {
	  echo "Building version ${devTag}"

	  sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
	}

	// Run unit tests and code coverage tests in parallel
  // Using Maven run the unit tests
  // Using Maven call SonarQube for Code Analysis
  stage('Unit Tests and Code Analysis') {
      parallel (
            "unitTests" : {
					echo "Running Unit Tests"
					sh "${mvnCmd} test"
            },
            "codeCoverage" : {
					echo "Running Code Analysis"
					sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.sonarqube-shared.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
            }
        )
	}

  // Publish the built war file to Nexus
  stage('Publish to Nexus') {
    echo "Publish to Nexus"
	sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.nexus3-shared.svc.cluster.local:8081/repository/releases"
  }

  // Build the OpenShift Image in OpenShift and tag it.
  stage('Build and Tag OpenShift Image') {
    echo "Building OpenShift container image parksmap:${devTag}"
	sh "oc start-build parksmap --follow --from-file=http://nexus3.nexus3-shared.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/parksmap/${version}/parksmap-${version}.jar -n parksmap-dev"
	openshiftTag alias: 'false', destStream: 'parksmap', destTag: devTag, destinationNamespace: 'parksmap-dev', namespace: 'parksmap-dev', srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
  }

  // Deploy the built image to the Development Environment.
  stage('Deploy to Dev') {
    echo "Deploying container image to Development Project"
    
  // Update the Image on the Development Deployment Config
  sh "oc set image dc/parksmap parksmap=docker-registry.default.svc:5000/parksmap-dev/parksmap:${devTag} -n parksmap-dev"

  // Deploy the development application.
  openshiftDeploy depCfg: 'parksmap', namespace: 'parksmap-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
  openshiftVerifyDeployment depCfg: 'parksmap', namespace: 'parksmap-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
  openshiftVerifyService namespace: 'parksmap-dev', svcName: 'parksmap', verbose: 'false'

  }

  // Run Integration Tests in the Development Environment.
  stage('Integration Tests') {
    echo "Running Integration Tests"
	
	sh "curl -i http://parksmap.parksmap-dev.apps.na39.openshift.opentlc.com/ws/healthz/"
	sh "curl -i http://parksmap.parksmap-dev.apps.na39.openshift.opentlc.com/ws/backends/list"	
  }

  // Copy Image to Nexus Docker Registry
  stage('Copy Image to Nexus Docker Registry') {
  echo "Copy image to Nexus Docker Registry"

  sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/parksmap-dev/parksmap:${devTag} docker://registry-nexus3.nexus3-shared.svc.cluster.local:5000/parksmap:${devTag}"

  // Tag the built image with the production tag.
  openshiftTag alias: 'false', destStream: 'parks', destTag: prodTag, destinationNamespace: 'parksmap-dev', namespace: 'parksmap-dev', srcStream: 'parksmap', srcTag: devTag, verbose: 'false'
  }

	// Blue/Green Deployment into Production
	// -------------------------------------
	// Do not activate the new version yet.
	def destApp   = ""
	def activeApp = ""

	stage('Blue/Green Production Deployment') {
		// copy image from external registry to integrated registry, production project
		sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --dest-creds openshift:\$(oc whoami -t) --src-creds admin:admin123 docker://registry-nexus3.nexus3-shared.svc.cluster.local:5000/parksmap:${devTag} docker://docker-registry.default.svc.cluster.local:5000/parksmap-prod/parksmap:${devTag}"

		// Tag the copied image with the production tag.
	  openshiftTag alias: 'false', destStream: 'parksmap', destTag: prodTag, destinationNamespace: 'parksmap-prod', namespace: 'parksmap-prod', srcStream: 'parksmap', srcTag: devTag, verbose: 'false'

	  activeApp = sh(returnStdout: true, script: "oc get route parksmap -n parksmap-prod -o jsonpath='{ .spec.to.name }'").trim()
	  
		if (activeApp == "parksmap-b") {
			destApp = "parksmap-g"
		} else if (activeApp == "parksmap-g") {
			destApp = "parksmap-b"
		} else {
			currentBuild.rawBuild.result = Result.ABORTED
			throw new hudson.AbortException('No active parksmap app found!')
			echo 'Further code will not be executed'
		}

		echo "Active Application:      " + activeApp
		echo "Destination Application: " + destApp

	  // Update the Image on the Production Deployment Config
	  sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/parksmap-prod/parksmap:${prodTag} -n parksmap-prod"

	  // Deploy the inactive application.
	  openshiftDeploy depCfg: destApp, namespace: 'parksmap-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
	  openshiftVerifyDeployment depCfg: destApp, namespace: 'parksmap-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
	  openshiftVerifyService namespace: 'parksmap-prod', svcName: destApp, verbose: 'false'
	}

	stage('Switch over to new Version') {
	  input "Switch Production?"

	  echo "Switching Production application to " + destApp
	  // Replace parksmap-prod with the name of your production project
	  sh 'oc patch route parksmap -n parksmap-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
	}


}
